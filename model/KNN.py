import os
import pandas as pd
from scipy.io import arff
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, accuracy_score

# ========== 1. ƒê∆∞·ªùng d·∫´n ==========
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_PATH = os.path.join(BASE_DIR, "..", "data", "phishing.arff")

# üî• T·∫°o th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£ ri√™ng cho KNN
RESULT_DIR = os.path.join(BASE_DIR, "..", "result", "KNN")
os.makedirs(RESULT_DIR, exist_ok=True)

# ========== 2. ƒê·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu ==========
print(f"[+] ƒêang ƒë·ªçc d·ªØ li·ªáu t·ª´ : {DATA_PATH}")
data, meta = arff.loadarff(DATA_PATH)
df = pd.DataFrame(data)

# Decode byte ‚Üí int
df_cleaned = df.apply(lambda col: col.map(lambda x: int(x.decode('utf-8')) if isinstance(x, bytes) else int(x)))
X = df_cleaned.drop("Result", axis=1)
y = df_cleaned["Result"]

# ========== 3. Chia t·∫≠p hu·∫•n luy·ªán / ki·ªÉm tra ==========
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ========== 4. Hu·∫•n luy·ªán KNN ==========
print("[+] ƒêang hu·∫•n luy·ªán m√¥ h√¨nh KNN...")
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

# ========== 5. ƒê√°nh gi√° ==========
y_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f"\n[+] Accuracy: {accuracy:.4f}")
print("[+] B√°o c√°o ph√¢n lo·∫°i:\n", report)

# ========== 6. Ghi k·∫øt qu·∫£ v√†o file ==========
output_path = os.path.join(RESULT_DIR, "knn_results.txt")
with open(output_path, "w", encoding="utf-8") as f:
    f.write(f"Accuracy: {accuracy:.4f}\n")
    f.write(report)

print(f"[+] K·∫øt qu·∫£ ƒë√£ l∆∞u t·∫°i: {output_path}")
