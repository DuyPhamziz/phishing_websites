from scipy.io import arff
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
import matplotlib.pyplot as plt
import numpy as np
import os

# T·∫°o th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£
output_dir = 'result/random forest'
os.makedirs(output_dir, exist_ok=True)

# B∆∞·ªõc 1: ƒê·ªçc d·ªØ li·ªáu
data, meta = arff.loadarff('C:/phishing_websites/data/phishing.arff')
df = pd.DataFrame(data)

# B∆∞·ªõc 2: Gi·∫£i m√£ c√°c c·ªôt d·∫°ng byte
for col in df.select_dtypes([object]):
    df[col] = df[col].str.decode('utf-8')

# B∆∞·ªõc 3: T√°ch d·ªØ li·ªáu
X = df.drop('Result', axis=1)
y = df['Result']

# B∆∞·ªõc 4: Chia v√† hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi 30 thu·ªôc t√≠nh
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# B∆∞·ªõc 5: D·ª± ƒëo√°n v√† ƒë√°nh gi√°
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
report_dict = classification_report(y_test, y_pred, output_dict=True)
recall = report_dict['-1']['recall']

# B∆∞·ªõc 6: Ghi k·∫øt qu·∫£ v√†o file
with open(os.path.join(output_dir, 'metrics.txt'), 'w', encoding='utf-8') as f:
    f.write("üìä ƒê√ÅNH GI√Å M√î H√åNH RANDOM FOREST (30 ƒë·∫∑c tr∆∞ng)\n\n")
    f.write(f"‚úÖ Accuracy: {accuracy:.4f}\n")
    f.write(f"‚úÖ Recall l·ªõp -1 (URL nguy hi·ªÉm): {recall:.4f}\n\n")
    f.write("üìå Classification Report:\n")
    f.write(report)

# B∆∞·ªõc 7: L∆∞u bi·ªÉu ƒë·ªì ƒë·∫∑c tr∆∞ng quan tr·ªçng
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

plt.figure(figsize=(12, 6))
plt.title("Top 10 ƒë·∫∑c tr∆∞ng quan tr·ªçng (d·ª±a tr√™n 30 ƒë·∫∑c tr∆∞ng)")
plt.bar(range(10), importances[indices[:10]], align='center')
plt.xticks(range(10), [features[i] for i in indices[:10]], rotation=45)
plt.tight_layout()
plt.savefig(os.path.join(output_dir, 'feature_importance.png'))
plt.close()

# In ra console
print(f"‚úÖ Accuracy (30 features): {accuracy:.4f}")
print(f"‚úÖ Recall l·ªõp -1 (URL nguy hi·ªÉm): {recall:.4f}")
